<project name="OpenFlux" basedir="/Users/mac/Workspace/FluxDocs" default="default">
	
	<property file="build.properties"/>
	<taskdef resource="flexTasks.tasks" classpath="${basedir}/libs/flexTasks.jar" />
	
	<!-- Extension for ANT to allow for tasks like "for" and "propertyregex" -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/libs/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<tstamp>
		<format property="build.timestamp" pattern="MM-dd-yyyy" />
	</tstamp>
	
	<target name="default">
		<antcall target="docs" />
		<antcall target="fixDocMimeTypes" />
	</target>
	
	<target name="docs">
		
		<!-- Clean out the contents of the doc directory, without deleting "docs" -->
		<delete includeemptydirs="true">
			<fileset dir="${core.docs.dir}" includes="**/*" />
		</delete>
		
		<exec executable="${asdoc.exe}" spawn="no">
			<!-- Place the documentation in the "docs" directory -->
			<arg line="-o '${core.docs.dir}'" />
			
			<!-- Specify the main source path as "src" -->
			<arg line="-source-path '${core.src.dir}'" />
			
			<arg line="-namespace http://openflux.googlecode.com ${core.src.dir}/openflux.xml " />
			<arg line="-doc-namespaces http://openflux.googlecode.com " />
			
			<!-- Document all of the classes in the "src" tree -->
			<!--<arg line="-include-sources '${core.src.dir}/com/openflux' " />-->
			
			<!--
			<arg line="-namespace http://openflux.googlecode.com ${core.src.dir}/manifest.xml" />-->
			<!-- <arg line="-namespace http://mq.universalmind.com/launchpad/ ${core.src.dir}/mq_manifest.xml" /> -->
			<!--<arg line="-doc-namespaces http://openflux.googlecode.com" />-->
			
			
			<!-- Include the library name in the window title -->
			<arg line="-window-title '${core.name}' "/>
			
			<arg line="-templates-path '${flexsdk.templates.dir}' "/>
			<arg line="-external-library-path='${core.libs.dir}'"/>
			
		</exec>
	</target>
	
	<target name="fixDocMimeTypes">
		<!-- Loop over the files in the doc directory -->
		<for param="file">
			<!-- Include the following file types in the target directory as part of the loop -->
			<fileset dir="${core.docs.dir}">
				<include name="**/*.html" />
				<include name="**/*.png" />
				<include name="**/*.jpg" />
				<include name="**/*.css" />
				<include name="**/*.js" />
				<include name="**/*.gif" />
			</fileset>
			
			<sequential>
				<!--- 
					Determine the mime-type from the file extension.
				-->
				<property name="mime.type.html" value="text/html" />
				<property name="mime.type.png" value="image/png" />
				<property name="mime.type.jpg" value="image/jpeg" />
				<property name="mime.type.css" value="text/css" />
				<property name="mime.type.js" value="text/plain" />
				<property name="mime.type.gif" value="image/gif" />
				
				<!-- Extract the extension from the file name -->
				<propertyregex property="fileExtension" override="yes" input="@{file}"
						regexp=".*${file.separator}([^\\]+)\.([a-zA-Z0-9]+)" replace="\2" />
			
				<!-- Set the mime.type property based on the extension -->
				<propertycopy name="mime.type" from="mime.type.${fileExtension}" override="yes" />
				
				<!-- Sanity check...
				<echo>@{file} is ${fileExtension} with mime type ${mime.type}</echo>
				-->
				
				<!-- Configure the mime type for the file -->
				<exec executable="${svn.exe}" spawn="no">
					<arg line="propset svn:mime-type '${mime.type}' '@{file}'" />
				</exec>
			</sequential>
		</for>
	</target>
	
</project>